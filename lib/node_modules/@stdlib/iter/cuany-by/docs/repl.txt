 {{alias}}( iterator, predicate[, thisArg] )
 Returns an iterator which cumulatively tests whether at least one iterated value passes a test implemented by a predicate function.

 If an environment supports `Symbol.iterator` and a provided iterator is iterable, the returned iterator is iterable.

 @param {Iterator} iterator - input iterator
 @param {Function} predicate - predicate function
 @param {*} [thisArg] - execution context
 @throws {TypeError} first argument must be an iterator
 @throws {TypeError} second argument must be a function
 @returns {Iterator} iterator

 @example
 var array2iterator = require( '@stdlib/array/to-iterator' );

 function isPositive( v ) {
     return ( v > 0 );
 }
 var arr = array2iterator( [ 0, 0, 0, 1, 0 ] );

 var it = iterCuAnyBy( arr, isPositive );

 var v = it.next().value;
 // returns false

 v = it.next().value;
// returns false

 v = it.next().value;
 // returns false

 v = it.next().value;
 // returns true

 v = it.next().value;
 // returns true

 var bool = it.next().done;
 // returns true

 @example
 var array2iterator = require( '@stdlib/array/to-iterator' );

 function isEven( v ) {
     return ( v % 2 === 0 );
 }
 var arr = array2iterator( [ 1, 3, 5, 6, 7 ] );

 var it = iterCuAnyBy( arr, isEven );

 var v = it.next().value;
 // returns false

 v = it.next().value;
 // returns false

 v = it.next().value;
// returns false

 v = it.next().value;
 // returns true

 v = it.next().value;
 // returns true

 var bool = it.next().done;
 // returns true

 @See Also
 --------
 @stdlib/iter/any-by
 @stdlib/iter/cuall-by
 @stdlib/iter/cunone-by

