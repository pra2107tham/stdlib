/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require('tape');
var proxyquire = require('proxyquire');
var array2iterator = require('@stdlib/array/to-iterator');
var randu = require('@stdlib/random/iter/randu');
var iterCuAnyBy = require('./../lib');


// TESTS //

tape('main export is a function', function test(t) {
	t.ok(true, __filename);
	t.strictEqual(typeof iterCuAnyBy, 'function', 'main export is a function');
	t.end();
});

tape('the function throws an error if not provided an iterator protocol-compliant object', function test(t) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for (i = 0; i < values.length; i++) {
		t.throws(badValue(values[i]), TypeError, 'throws a type error when provided ' + values[i]);
	}
	t.end();

	function badValue(value) {
		return function badValue() {
			iterCuAnyBy(value, function isPositive(v) {
				return v > 0;
			});
		};
	}
});

tape('the function throws an error if the second argument is not a function', function test(t) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		/./ // regular expression
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			iterCuAnyBy( array2iterator([1, 2, 3]), value );
		};
	}
});

tape('the function returns an iterator protocol-compliant object (with predicate)', function test(t) {
	var arr;
	var it;
	var r;
	var i;

	arr = array2iterator([0, 0, 1, 0, 1]);

	function isPositive(v) {
		return (v > 0);
	}

	it = iterCuAnyBy(arr, isPositive);

	for (i = 0; i < 5; i++) {
		r = it.next();
		t.equal(typeof r.value, 'boolean', 'returns expected value');
		t.equal(typeof r.done, 'boolean', 'returns expected value');
	}
	t.equal(typeof r.done, 'boolean', 'returns expected value');
	t.end();
});

tape('if no upstream iterator values pass the predicate, the function returns an iterator protocol-compliant object which returns all falsy values', function test(t) {
	var expected;
	var actual;
	var values;
	var it;
	var i;

	values = [0, -1, -2, -3];
	expected = [
		{
			'value': false,
			'done': false
		},
		{
			'value': false,
			'done': false
		},
		{
			'value': false,
			'done': false
		},
		{
			'value': false,
			'done': false
		},
		{
			'done': true
		}
	];

	function isPositive(v) {
		return (v > 0);
	}

	it = iterCuAnyBy(array2iterator(values), isPositive);

	actual = [];
	for (i = 0; i < expected.length; i++) {
		actual.push(it.next());
	}
	t.deepEqual(actual, expected, 'returns expected values');
	t.end();
});

tape('if at least one upstream iterator value passes the predicate, the function returns an iterator protocol-compliant object which returns truthy values upon encountering the first passing value', function test(t) {
	var expected;
	var actual;
	var values;
	var it;
	var i;

	values = [ 0, 0, 1, 0 ];
	expected = [
		{
			'value': false,
			'done': false
		},
		{
			'value': false,
			'done': false
		},
		{
			'value': true,
			'done': false
		},
		{
			'value': true,
			'done': false
		},
		{
			'done': true
		}
	];

	function isPositive( value ) {
		return ( value > 0 );
	}
	it = iterCuAnyBy( array2iterator( values ), isPositive );

	actual = [];
	for ( i = 0; i < expected.length; i++ ) {
		actual.push( it.next() );
	}
	t.deepEqual( actual, expected, 'returns expected values' );
	t.end();
});

tape('if an early upstream iterator value passes the predicate, the function returns true from that point on', function test( t ) {
	var expected;
	var actual;
	var values;
	var it;
	var i;

	values = [ 1, 2, 3, 4, 5 ];
	expected = [
		{
			'value': true,
			'done': false
		},
		{
			'value': true,
			'done': false
		},
		{
			'value': true,
			'done': false
		},
		{
			'value': true,
			'done': false
		},
		{
			'value': true,
			'done': false
		},
		{
			'done': true
		}
	];

	function isPositive( value ) {
		return ( value > 0 );
	}

	it = iterCuAnyBy( array2iterator( values ), isPositive );

	actual = [];
	for ( i = 0; i < expected.length; i++ ) {
		actual.push( it.next() );
	}
	t.deepEqual( actual, expected, 'returns expected values' );
	t.end();
});

tape( 'if a late upstream iterator value passes the predicate, the function returns true from that point on', function test( t ) {
	var expected;
	var actual;
	var values;
	var it;
	var i;

	values = [ 0, 0, 0, 5, 6 ];
	expected = [
		{
			'value': false,
			'done': false
		},
		{
			'value': false,
			'done': false
		},
		{
			'value': false,
			'done': false
		},
		{
			'value': true,
			'done': false
		},
		{
			'value': true,
			'done': false
		},
		{
			'done': true
		}
	];

	function isPositive( value ) {
		return ( value > 0 );
	}

	it = iterCuAnyBy( array2iterator( values ), isPositive );

	actual = [];
	for ( i = 0; i < expected.length; i++ ) {
		actual.push( it.next() );
	}
	t.deepEqual( actual, expected, 'returns expected values' );
	t.end();
});

tape( 'the returned iterator has a `return` method for closing an iterator (no argument)', function test( t ) {
	var it;
	var r;

	it = iterCuAnyBy( randu(), function isPositive(v) {
		return v > 0.5;
	});

	r = it.next();
	t.equal( typeof r.value, 'boolean', 'returns expected value' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.next();
	t.equal( typeof r.value, 'boolean', 'returns expected value' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.return();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	r = it.next();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	t.end();
});

tape( 'the returned iterator has a `return` method for closing an iterator (argument)', function test( t ) {
	var it;
	var r;

	it = iterCuAnyBy( randu(), function isPositive(v) {
		return v > 0.5;
	} );

	r = it.next();
	t.equal( typeof r.value, 'boolean', 'returns expected value' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.next();
	t.equal( typeof r.value, 'boolean', 'returns expected value' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.return( 'finished' );
	t.equal( r.value, 'finished', 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	r = it.next();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	t.end();
});

tape( 'if an environment supports `Symbol.iterator` and the provided iterator is iterable, the returned iterator is iterable', function test( t ) {
	var iterCuAnyBy;
	var opts;
	var rand;
	var it1;
	var it2;
	var i;

	iterCuAnyBy = proxyquire( './../lib/main.js', {
		'@stdlib/symbol/iterator': Symbol.iterator
	});

	function isPositive(v) {
		return (v > 0);
	}

	opts = {
		'iter': 100
	};
	rand = randu( opts );

	it1 = iterCuAnyBy( rand, isPositive );

	t.equal( typeof it1[ Symbol.iterator ], 'function', 'has method' );
	t.equal( it1[ Symbol.iterator ].length, 0, 'has zero arity' );

	it2 = it1[ Symbol.iterator ]();
	t.equal( typeof it2, 'object', 'returns an object' );
	t.equal( typeof it2.next, 'function', 'has `next` method' );
	t.equal( typeof it2.return, 'function', 'has `return` method' );

	for ( i = 0; i < 100; i++ ) {
		t.equal( typeof it2.next().value, 'boolean', 'returns a boolean' );
	}
	t.end();
});

tape( 'if an environment does not support `Symbol.iterator`, the returned iterator is not iterable', function test( t ) {
	var iterCuAnyBy;
	var it;

	iterCuAnyBy = proxyquire( './../lib/main.js', {
		'@stdlib/symbol/iterator': false
	});

	it = iterCuAnyBy( randu(), function isPositive( v ) {
		return ( v > 0.5 );
	});
	t.equal( it[ Symbol.iterator ], void 0, 'does not have property' );

	t.end();
});
